// Code generated by MockGen. DO NOT EDIT.
// Source: url-shortener/service (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"
	model "url-shortener/model"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockService) Decode(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockServiceMockRecorder) Decode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockService)(nil).Decode), arg0, arg1)
}

// DeleteUrl mocks base method.
func (m *MockService) DeleteUrl(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUrl", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUrl indicates an expected call of DeleteUrl.
func (mr *MockServiceMockRecorder) DeleteUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUrl", reflect.TypeOf((*MockService)(nil).DeleteUrl), arg0, arg1)
}

// Encode mocks base method.
func (m *MockService) Encode(arg0 context.Context, arg1 string, arg2 *time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockServiceMockRecorder) Encode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockService)(nil).Encode), arg0, arg1, arg2)
}

// GetUrlObjects mocks base method.
func (m *MockService) GetUrlObjects(arg0 context.Context, arg1, arg2 *string) ([]*model.UrlObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrlObjects", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.UrlObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrlObjects indicates an expected call of GetUrlObjects.
func (mr *MockServiceMockRecorder) GetUrlObjects(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrlObjects", reflect.TypeOf((*MockService)(nil).GetUrlObjects), arg0, arg1, arg2)
}
